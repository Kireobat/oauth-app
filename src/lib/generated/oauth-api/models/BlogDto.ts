/* tslint:disable */
/* eslint-disable */
/**
 * OAuth API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { UserDto } from './UserDto';
import {
    UserDtoFromJSON,
    UserDtoFromJSONTyped,
    UserDtoToJSON,
    UserDtoToJSONTyped,
} from './UserDto';
import type { ReactionDto } from './ReactionDto';
import {
    ReactionDtoFromJSON,
    ReactionDtoFromJSONTyped,
    ReactionDtoToJSON,
    ReactionDtoToJSONTyped,
} from './ReactionDto';
import type { TopicDto } from './TopicDto';
import {
    TopicDtoFromJSON,
    TopicDtoFromJSONTyped,
    TopicDtoToJSON,
    TopicDtoToJSONTyped,
} from './TopicDto';

/**
 * 
 * @export
 * @interface BlogDto
 */
export interface BlogDto {
    /**
     * 
     * @type {number}
     * @memberof BlogDto
     */
    id?: number;
    /**
     * 
     * @type {UserDto}
     * @memberof BlogDto
     */
    createdBy?: UserDto;
    /**
     * 
     * @type {string}
     * @memberof BlogDto
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof BlogDto
     */
    description?: string;
    /**
     * 
     * @type {Date}
     * @memberof BlogDto
     */
    createdTime?: Date;
    /**
     * 
     * @type {Date}
     * @memberof BlogDto
     */
    editedTime?: Date;
    /**
     * 
     * @type {Array<ReactionDto>}
     * @memberof BlogDto
     */
    reactions?: Array<ReactionDto>;
    /**
     * 
     * @type {TopicDto}
     * @memberof BlogDto
     */
    topic?: TopicDto;
}

/**
 * Check if a given object implements the BlogDto interface.
 */
export function instanceOfBlogDto(value: object): value is BlogDto {
    return true;
}

export function BlogDtoFromJSON(json: any): BlogDto {
    return BlogDtoFromJSONTyped(json, false);
}

export function BlogDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): BlogDto {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'createdBy': json['createdBy'] == null ? undefined : UserDtoFromJSON(json['createdBy']),
        'title': json['title'] == null ? undefined : json['title'],
        'description': json['description'] == null ? undefined : json['description'],
        'createdTime': json['createdTime'] == null ? undefined : (new Date(json['createdTime'])),
        'editedTime': json['editedTime'] == null ? undefined : (new Date(json['editedTime'])),
        'reactions': json['reactions'] == null ? undefined : ((json['reactions'] as Array<any>).map(ReactionDtoFromJSON)),
        'topic': json['topic'] == null ? undefined : TopicDtoFromJSON(json['topic']),
    };
}

export function BlogDtoToJSON(json: any): BlogDto {
    return BlogDtoToJSONTyped(json, false);
}

export function BlogDtoToJSONTyped(value?: BlogDto | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'createdBy': UserDtoToJSON(value['createdBy']),
        'title': value['title'],
        'description': value['description'],
        'createdTime': value['createdTime'] == null ? undefined : ((value['createdTime']).toISOString()),
        'editedTime': value['editedTime'] == null ? undefined : ((value['editedTime']).toISOString()),
        'reactions': value['reactions'] == null ? undefined : ((value['reactions'] as Array<any>).map(ReactionDtoToJSON)),
        'topic': TopicDtoToJSON(value['topic']),
    };
}

