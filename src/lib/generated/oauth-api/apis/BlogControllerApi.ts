/* tslint:disable */
/* eslint-disable */
/**
 * OAuth API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BlogDto,
  BlogEntity,
  CreateBlogDto,
  OAuthApiPageDtoBlogDto,
} from '../models/index';
import {
    BlogDtoFromJSON,
    BlogDtoToJSON,
    BlogEntityFromJSON,
    BlogEntityToJSON,
    CreateBlogDtoFromJSON,
    CreateBlogDtoToJSON,
    OAuthApiPageDtoBlogDtoFromJSON,
    OAuthApiPageDtoBlogDtoToJSON,
} from '../models/index';

export interface CreateBlogRequest {
    createBlogDto: CreateBlogDto;
}

export interface GetBlogByIdRequest {
    id: number;
}

export interface GetBlogsRequest {
    page?: number;
    size?: number;
    sort?: Array<string>;
}

export interface UpdateBlogByIdRequest {
    blogEntity: BlogEntity;
}

/**
 * 
 */
export class BlogControllerApi extends runtime.BaseAPI {

    /**
     */
    async createBlogRaw(requestParameters: CreateBlogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BlogDto>> {
        if (requestParameters['createBlogDto'] == null) {
            throw new runtime.RequiredError(
                'createBlogDto',
                'Required parameter "createBlogDto" was null or undefined when calling createBlog().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("github", []);
        }

        const response = await this.request({
            path: `/api/v1/blog/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateBlogDtoToJSON(requestParameters['createBlogDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BlogDtoFromJSON(jsonValue));
    }

    /**
     */
    async createBlog(requestParameters: CreateBlogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BlogDto> {
        const response = await this.createBlogRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getBlogByIdRaw(requestParameters: GetBlogByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BlogDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getBlogById().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("github", []);
        }

        const response = await this.request({
            path: `/api/v1/blog`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BlogDtoFromJSON(jsonValue));
    }

    /**
     */
    async getBlogById(requestParameters: GetBlogByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BlogDto> {
        const response = await this.getBlogByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getBlogsRaw(requestParameters: GetBlogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OAuthApiPageDtoBlogDto>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("github", []);
        }

        const response = await this.request({
            path: `/api/v1/blogs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OAuthApiPageDtoBlogDtoFromJSON(jsonValue));
    }

    /**
     */
    async getBlogs(requestParameters: GetBlogsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OAuthApiPageDtoBlogDto> {
        const response = await this.getBlogsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateBlogByIdRaw(requestParameters: UpdateBlogByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BlogDto>> {
        if (requestParameters['blogEntity'] == null) {
            throw new runtime.RequiredError(
                'blogEntity',
                'Required parameter "blogEntity" was null or undefined when calling updateBlogById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("github", []);
        }

        const response = await this.request({
            path: `/api/v1/blog/update`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: BlogEntityToJSON(requestParameters['blogEntity']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BlogDtoFromJSON(jsonValue));
    }

    /**
     */
    async updateBlogById(requestParameters: UpdateBlogByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BlogDto> {
        const response = await this.updateBlogByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
