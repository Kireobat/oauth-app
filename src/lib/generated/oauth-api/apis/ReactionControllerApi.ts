/* tslint:disable */
/* eslint-disable */
/**
 * OAuth API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateReactionDto,
  OAuthResponseDto,
} from '../models/index';
import {
    CreateReactionDtoFromJSON,
    CreateReactionDtoToJSON,
    OAuthResponseDtoFromJSON,
    OAuthResponseDtoToJSON,
} from '../models/index';

export interface AddReactionRequest {
    createReactionDto: CreateReactionDto;
}

export interface RemoveReactionRequest {
    reactionId: number;
}

/**
 * 
 */
export class ReactionControllerApi extends runtime.BaseAPI {

    /**
     */
    async addReactionRaw(requestParameters: AddReactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['createReactionDto'] == null) {
            throw new runtime.RequiredError(
                'createReactionDto',
                'Required parameter "createReactionDto" was null or undefined when calling addReaction().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("github", []);
        }

        const response = await this.request({
            path: `/api/v1/reaction/add`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateReactionDtoToJSON(requestParameters['createReactionDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async addReaction(requestParameters: AddReactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addReactionRaw(requestParameters, initOverrides);
    }

    /**
     */
    async removeReactionRaw(requestParameters: RemoveReactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['reactionId'] == null) {
            throw new runtime.RequiredError(
                'reactionId',
                'Required parameter "reactionId" was null or undefined when calling removeReaction().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['reactionId'] != null) {
            queryParameters['reactionId'] = requestParameters['reactionId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("github", []);
        }

        const response = await this.request({
            path: `/api/v1/reaction/remove`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async removeReaction(requestParameters: RemoveReactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeReactionRaw(requestParameters, initOverrides);
    }

}
